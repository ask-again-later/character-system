.character
  h2
    = "Character: #{@character.name}"

  ul.tabs
    li
      = link_to "Mechanics", "#mechanics"
    li
      = link_to "Questionnaire", "#questionnaire"
    - if @character.rituals.present?
      li
        = link_to "Rituals", "#rituals"
    - if @character.equipment.present?
      li
        = link_to "Equipment", "#equipment"
    li
      = link_to "Experience", "#experience"

  section.mechanics
    .form-row.basic-stats
      .stat
        strong Name:
        = @character.name
      .stat
        strong Status:
        = @character.get_status
      .stat
        strong Character Pronouns:
        = @character.pronouns
      .stat
        strong Player:
        = @character.user.name
      .stat
        strong True Self:
        - if @character.true_self
          = @character.true_self.name

    h3.section Attributes

    .flex-container.attributes
      - @attributes.each do |cat, vals|
        .column
          strong
            = cat
          - vals.each do |val|
            .row
              span.label
                = val
              .dots
                - eval("@character.#{val.parameterize("_")}").times do
                  = icon 'circle'

                - (5-eval("@character.#{val.parameterize("_")}")).times do
                  = icon 'circle-o'

    h3.section Skills and Special Training

    .flex-container.skills-training
      - @skills_training.each do |cat, vals|
        .column
          strong
            = cat
          - vals.each do |val|
            .row
              span.label
                = val
              .dots
                - eval("@character.#{val.parameterize("_")}").times do
                  = icon 'circle'

                - (5-eval("@character.#{val.parameterize("_")}")).times do
                  = icon 'circle-o'

    h3.section Advantages

    ul#advantages
      - @character.character_has_advantages.group_by{|adv| adv.advantage_id}.each do |k, group|
        - group.each_with_index do |cha, i|
          li
            p.name
              = cha.advantage.name
              - if cha.advantage.requires_specification?
                = " (#{cha.specification})"
              - if cha.advantage.allowed_ratings.length > 1
                = " #{cha.rating}"
            - if i == group.length-1
              p.desc
                = raw @markdown.render(cha.advantage.description)

    h3.section Challenges

    ul#challenges
      - @character.character_has_challenges.each do |chc|
        li
          p.name
            - if chc.challenge.is_custom and chc.custom_name.present?
              = chc.custom_name
            - else
              = chc.challenge.name
          p.desc
            - if chc.challenge.is_custom and chc.custom_description.present?
              = raw @markdown.render(chc.custom_description)
            - else
              = raw @markdown.render(chc.challenge.description)

    h3.section Derived Stats
    .derived-stats
      .stat.willpower
        strong Willpower:
        = @character.willpower

      .stat.health
        strong Health:
        = @character.health

      .stat.initiative
        strong Initiative:
        = @character.initiative

      .stat.defense
        strong Defense:
        = @character.defense

      .stat.speed
        strong Speed:
        = @character.speed

    h3.section Public Blurb

    .public-blurb
      - if @character.public_blurb.present?
        = @character.public_blurb

  section.questionnaire
    h3.section Questionnaire

    .questionnaire.accordion
      - @questionnaire_sections.each do |qs|
        .questionnaire-section
          h4 #{qs.title}
          .section-content
            - qs.questionnaire_items.each do |qi|
              .question
                .question-text
                  = qi.question
                .question-answer
                  - if @character.questionnaire_answers.where(questionnaire_item_id: qi.id).present?
                    = raw @markdown.render(@character.questionnaire_answers.where(questionnaire_item_id: qi.id).first.answer)

  section.rituals
    h3.section Rituals
  section.equipment
    h3.section Equipment

  section.experience
    h3.section Experience

    table.plain
      thead
        tr
          th Date
          th Amount
          th Description
      tbody
        - if @character.xp_records.present?
          - @character.xp_records.each do |xpr|
            tr
              td #{xpr.created_at}
              td #{xpr.amount}
              td #{xpr.description}

    h4 Pending Expenditures

    .expenditure
      - if @character.xp_expenditures.where(is_approved: false).present?
        - @character.xp_expenditures.where(is_approved: false).each do |xpe|
          - JSON.parse(xpe.diff).each do |item, val|
            - if item != "character_has_advantages" and item != "character_has_challenges"
              li
                strong #{item.titleize}
                = " from "
                em #{val[0]}
                = " to "
                em #{val[1]}
            - elsif item == "character_has_advantages"
              - advantages_old = val[0]
              - advantages_new = val[1]
              - advantages_removed = advantages_old.select{|ao| advantages_new.index{|an| an['id'] == ao['id']}.nil?}
              - advantages_updated = advantages_old.reject{|ao| ab = advantages_new.bsearch{|an| an['id'] == ao['id']}; ab.present? ? ab['rating'] == ao['rating'] : true}
              - advantages_added = advantages_new.select{|an| an['id'].nil?}
              - unless advantages_removed.empty?
                - advantages_removed.each do |ar|
                  - advantage = CharacterHasAdvantage.find(ar['id'])
                  li
                    = "Removed "
                    strong #{advantage.advantage.name}#{advantage.specification.present? ? " #{advantage.specification}" : ''} #{advantage.rating}
              - unless advantages_updated.empty?
                - advantages_updated.each do |au|
                  - advantage = CharacterHasAdvantage.find(au['id'])
                  li
                    strong #{advantage.advantage.name}#{advantage.specification.present? ? " (#{advantage.specification})" : ''}
                    = " from "
                    em #{advantage.rating}
                    = " to "
                    em #{au['rating']}
              - unless advantages_added.empty?
                - advantages_added.each do |aa|
                  - advantage = Advantage.find(aa['advantage_id'])
                  li
                    strong #{advantage.name}#{aa['specification'].present? ? " (#{aa['specification']})" : ''}
                    = " from "
                    em 0
                    = " to "
                    em #{aa['rating']}
            - elsif item == "character_has_challenges"
              - challenges_old = val[0]
              - challenges_new = val[1]
              - challenges_added = challenges_new.select{|cn| cn['id'].nil?}
              - challenges_removed = challenges_old.select{|co| challenges_new.index{|cn| cn['id'] == co['id']}.nil?}
              - unless challenges_removed.empty?
                - challenges_removed.each do |cr|
                  - challenge = CharacterHasChallenge.find(cr['id'])
              - unless challenges_added.empty?
                - challenges_added.each do |ca|
                  - challenge = Challenge.find(ca['challenge_id'])
                  li
                    = "Adding Challenge "
                    - if ca['custom_name'].present?
                      strong #{ca['custom_name']}
                    - else
                      strong #{challenge.name}
                    - if ca['custom_description'].present?
                      .description
                        = raw @markdown.render(ca['custom_description'])
          p.total
            strong Total Points Spent:
            = " #{xpe.amount}"
          .button-row
            = form_tag(character_delete_xp_expenditure_path(@character, xpe), method: 'DELETE')
              = button_tag "Cancel Expenditure", type: 'submit', class: 'button-text'

  = javascript_include_tag 'characters', 'data-turbolinks-track' => true
